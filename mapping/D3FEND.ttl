import rdflib

def _parseOntology(path: str = None) -> rdflib.Graph:
    # Instantiate a graph as defined in the rdflib library
    onto = rdflib.Graph()
    onto.parse(path, format='turtle')
    return onto

def query_ontology(ontology, sparql_query):
    results = ontology.query(sparql_query)
    return results

# Load ontology
ontology_path = "C:/Users/newmo/Downloads/d3fend.ttl"
ontology_graph = _parseOntology(ontology_path)

# Query classes and their associated datatype properties and ranges
classes_and_props_query = """
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?class (GROUP_CONCAT(DISTINCT ?propTypePair ; SEPARATOR=",") AS ?props)
WHERE {
    ?class rdf:type owl:Class .
    OPTIONAL { 
        ?prop rdfs:domain ?class ;
              a owl:DatatypeProperty ;
              rdfs:range ?range .
    }
    BIND (IF(BOUND(?prop), concat(str(?prop), ';', str(?range)), "") AS ?propTypePair)
} GROUP BY ?class  

"""

# Execute the query
classes_and_props_results = query_ontology(ontology_graph, classes_and_props_query)

# Print the results
for row in classes_and_props_results:
    print("Class:", row['class'])
    print("Properties:", row['props'])
    print("-----")

# Query relationships, domains, and ranges
relations_query = """
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?rel ?dom ?ran
WHERE {
    ?rel a ?propertyClass .
    filter(?propertyClass in (rdf:Property, owl:ObjectProperty, owl:FunctionalProperty, owl:AsymmetricProperty, 
           owl:InverseFunctionalProperty, owl:IrreflexiveProperty, owl:ReflexiveProperty, owl:SymmetricProperty, owl:TransitiveProperty))

    ?rel rdfs:domain ?dom ;
      rdfs:range ?ran .
}
"""

# Execute the query
relations_results = query_ontology(ontology_graph, relations_query)

# Print the results
for row in relations_results:
    print("Relationship:", row['rel'])
    print("Domain:", row['dom'])
    print("Range:", row['ran'])
    print("-----")
